lip = NA,
chg = NA,
aac = NA,
alm1 = NA,
alm2 = NA,
miss.att.val = NA)
for (i in 1:length(df[,1])){
strRow <- as.character(ecoli.raw[i,])
strRow2 <- gsub("[,]+", ",", gsub(" ", ",",strRow))
strCols <- unlist(strsplit(strRow2, ","))
new_df[i,] <- strCols
}
return (new_df)
}
awful.df <- awful.parse.func(ecoli.raw)
for (i in 2:length(awful.df[1,] - 1)){
awful.df[,i] <- as.numeric(awful.df[,i])
}
import.names <- c("seq_name", "mcg", "gvh", "lip", "chg", "aac", "alm1", "alm2", "miss.att.val")
awful.parse.func <- function(df){
new_df <- data.frame(seq_name = NA,
mcg = NA,
gvh = NA,
lip = NA,
chg = NA,
aac = NA,
alm1 = NA,
alm2 = NA,
miss.att.val = NA)
for (i in 1:length(df[,1])){
strRow <- as.character(ecoli.raw[i,])
strRow2 <- gsub("[,]+", ",", gsub(" ", ",",strRow))
strCols <- unlist(strsplit(strRow2, ","))
new_df[i,] <- strCols
}
return (new_df)
}
awful.df <- awful.parse.func(ecoli.raw)
for (i in 2:(length(awful.df[1,]) - 1)){
awful.df[,i] <- as.numeric(awful.df[,i])
}
print(head(awful.df))
# that was a chore
import.names <- c("seq_name", "mcg", "gvh", "lip", "chg", "aac", "alm1", "alm2", "miss.att.val")
awful.parse.func <- function(df){
new_df <- data.frame(seq_name = NA,
mcg = NA,
gvh = NA,
lip = NA,
chg = NA,
aac = NA,
alm1 = NA,
alm2 = NA,
miss.att.val = NA)
for (i in 1:length(df[,1])){
strRow <- as.character(ecoli.raw[i,])
strRow2 <- gsub("[,]+", ",", gsub(" ", ",",strRow))
strCols <- unlist(strsplit(strRow2, ","))
new_df[i,] <- strCols
}
return (new_df)
}
awful.df <- awful.parse.func(ecoli.raw)
for (i in 2:(length(awful.df[1,]) - 1)){
if (i == 1 | i == length(awful.df[1,])){
awful.df[,i] <- as.factor(awful.df[,i])
}
else{
awful.df[,i] <- as.factor(awful.df[,i])
}
}
print(head(awful.df))
# that was a chore
import.names <- c("seq_name", "mcg", "gvh", "lip", "chg", "aac", "alm1", "alm2", "miss.att.val")
awful.parse.func <- function(df){
new_df <- data.frame(seq_name = NA,
mcg = NA,
gvh = NA,
lip = NA,
chg = NA,
aac = NA,
alm1 = NA,
alm2 = NA,
miss.att.val = NA)
for (i in 1:length(df[,1])){
strRow <- as.character(ecoli.raw[i,])
strRow2 <- gsub("[,]+", ",", gsub(" ", ",",strRow))
strCols <- unlist(strsplit(strRow2, ","))
new_df[i,] <- strCols
}
return (new_df)
}
awful.df <- awful.parse.func(ecoli.raw)
for (i in 2:(length(awful.df[1,]) - 1)){
if (i == 1 | i == length(awful.df[1,])){
awful.df[,i] <- as.factor(awful.df[,i])
else{
import.names <- c("seq_name", "mcg", "gvh", "lip", "chg", "aac", "alm1", "alm2", "miss.att.val")
awful.parse.func <- function(df){
new_df <- data.frame(seq_name = NA,
mcg = NA,
gvh = NA,
lip = NA,
chg = NA,
aac = NA,
alm1 = NA,
alm2 = NA,
miss.att.val = NA)
for (i in 1:length(df[,1])){
strRow <- as.character(ecoli.raw[i,])
strRow2 <- gsub("[,]+", ",", gsub(" ", ",",strRow))
strCols <- unlist(strsplit(strRow2, ","))
new_df[i,] <- strCols
}
return (new_df)
}
awful.df <- awful.parse.func(ecoli.raw)
for (i in 2:(length(awful.df[1,]) - 1))
{
if (i == 1 | i == length(awful.df[1,]))
{
awful.df[,i] <- as.factor(awful.df[,i])
}
else
{
awful.df[,i] <- as.numeric(awful.df[,i])
}
}
print(head(awful.df))
# that was a chore
print(apply(awful.df, 2, class))
print(apply(awful.df, 1, class))
print(apply(awful.df, 0, class))
print(apply(awful.df, 0, class))
?apply
print(apply(awful.df, 2, class))
print(apply(awful.df[1], 2, class))
?str
print(apply(awful.df, 2, str))
import.names <- c("seq_name", "mcg", "gvh", "lip", "chg", "aac", "alm1", "alm2", "miss.att.val")
awful.parse.func <- function(df){
new_df <- data.frame(seq_name = NA,
mcg = NA,
gvh = NA,
lip = NA,
chg = NA,
aac = NA,
alm1 = NA,
alm2 = NA,
miss.att.val = NA)
for (i in 1:length(df[,1])){
strRow <- as.character(ecoli.raw[i,])
strRow2 <- gsub("[,]+", ",", gsub(" ", ",",strRow))
strCols <- unlist(strsplit(strRow2, ","))
new_df[i,] <- strCols
}
return (new_df)
}
awful.df <- awful.parse.func(ecoli.raw)
for (i in 2:(length(awful.df[1,]) - 1))
{
if (i == 1 | i == length(awful.df[1,]))
{
awful.df[,i] <- as.factor(awful.df[,i])
}
else
{
awful.df[,i] <- as.numeric(awful.df[,i])
}
}
print(head(awful.df))
# that was a chore
print(apply(awful.df, 2, str))
lapply(awful.df, 2, str)
lapply(awful.df,str)
lapply(awful.df,str)
import.names <- c("seq_name", "mcg", "gvh", "lip", "chg", "aac", "alm1", "alm2", "miss.att.val")
awful.parse.func <- function(df){
new_df <- data.frame(seq_name = NA,
mcg = NA,
gvh = NA,
lip = NA,
chg = NA,
aac = NA,
alm1 = NA,
alm2 = NA,
miss.att.val = NA)
for (i in 1:length(df[,1])){
strRow <- as.character(ecoli.raw[i,])
strRow2 <- gsub("[,]+", ",", gsub(" ", ",",strRow))
strCols <- unlist(strsplit(strRow2, ","))
new_df[i,] <- strCols
}
return (new_df)
}
awful.df <- awful.parse.func(ecoli.raw)
for (i in 2:(length(awful.df[1,]) - 1))
{
if (i == 1 | i == length(awful.df[1,]))
{
awful.df[,i] <- as.factor(awful.df[,i])
}
else
{
awful.df[,i] <- as.numeric(awful.df[,i])
}
}
print(head(awful.df))
new_df <- awful.df
# that was a chore
import.names <- c("seq_name", "mcg", "gvh", "lip", "chg", "aac", "alm1", "alm2", "miss.att.val")
awful.parse.func <- function(df){
new_df <- data.frame(seq_name = NA,
mcg = NA,
gvh = NA,
lip = NA,
chg = NA,
aac = NA,
alm1 = NA,
alm2 = NA,
miss.att.val = NA)
for (i in 1:length(df[,1])){
strRow <- as.character(ecoli.raw[i,])
strRow2 <- gsub("[,]+", ",", gsub(" ", ",",strRow))
strCols <- unlist(strsplit(strRow2, ","))
new_df[i,] <- strCols
}
return (new_df)
}
awful.df <- awful.parse.func(ecoli.raw)
for (i in 2:(length(awful.df[1,]) - 1))
{
if (i == 1 | i == length(awful.df[1,]))
{
awful.df[,i] <- as.factor(awful.df[,i])
}
else
{
awful.df[,i] <- as.numeric(awful.df[,i])
}
}
print(head(awful.df))
new_df <- copy(awful.df)
import.names <- c("seq_name", "mcg", "gvh", "lip", "chg", "aac", "alm1", "alm2", "miss.att.val")
awful.parse.func <- function(df){
new_df <- data.frame(seq_name = NA,
mcg = NA,
gvh = NA,
lip = NA,
chg = NA,
aac = NA,
alm1 = NA,
alm2 = NA,
miss.att.val = NA)
for (i in 1:length(df[,1])){
strRow <- as.character(ecoli.raw[i,])
strRow2 <- gsub("[,]+", ",", gsub(" ", ",",strRow))
strCols <- unlist(strsplit(strRow2, ","))
new_df[i,] <- strCols
}
return (new_df)
}
awful.df <- awful.parse.func(ecoli.raw)
for (i in 2:(length(awful.df[1,]) - 1))
{
if (i == 1 | i == length(awful.df[1,]))
{
awful.df[,i] <- as.factor(awful.df[,i])
}
else
{
awful.df[,i] <- as.numeric(awful.df[,i])
}
}
print(head(awful.df))
new_df <- awful.df
# that was a chore
print(head(new_df))
print(head(new_df))
print(str(new_df))
print(head(new_df))
print(str(new_df))
print(lapply(new_df, class))
print(lapply(new_df, data.class))
sapply(new_df, sum
sapply(new_df, sum)
?sapply
cat(class(new_df), class(sum))
sapply(new_df, sum)
cat(class(new_df), class(sum))
for (i in 2:length(new_df[1,])-1){
sapply(new_df[i,], sum)
}
# cat(class(new_df), class(sum))
for (i in 2:length(new_df[1,])-1){
sapply(new_df[,i], sum)
}
print(new_df[,i])
# cat(class(new_df), class(sum))
for (i in 2:length(new_df[1,])-1){
print(new_df[i,])
# sapply(, sum)
}
# cat(class(new_df), class(sum))
# for (i in 2:length(new_df[1,])-1){
for (i in 2:4){
print(new_df[i,])
# sapply(, sum)
}
# cat(class(new_df), class(sum))
# for (i in 2:length(new_df[1,])-1){
for (i in 2:4){
print(new_df[,i])
# sapply(, sum)
}
# cat(class(new_df), class(sum))
# for (i in 2:length(new_df[1,])-1){
for (i in 2:4){
sapply(new_df[,i], sum)
# sapply(, sum)
}
# cat(class(new_df), class(sum))
# for (i in 2:length(new_df[1,])-1){
for (i in 2:4){
sapply(new_df[,i], sum)
# sapply(, sum)
}
# cat(class(new_df), class(sum))
# for (i in 2:length(new_df[1,])-1){
for (i in 2:4){
print(sapply(new_df[,i], sum))
# sapply(, sum)
}
# cat(class(new_df), class(sum))
# for (i in 2:length(new_df[1,])-1){
for (i in 2:4){
sapply(new_df[i], sum))
# cat(class(new_df), class(sum))
# for (i in 2:length(new_df[1,])-1){
for (i in 2:4){
sapply(new_df[i,], sum))
# cat(class(new_df), class(sum))
# for (i in 2:length(new_df[1,])-1){
for (i in 2:4){
sapply(new_df[i,], sum)
# sapply(, sum)
}
sapply(new_df[1,], sum)
sapply(new_df[2,], sum)
sapply(new_df[,1], sum)
sapply(new_df[,2], sum)
# cat(class(new_df), class(sum))
# for (i in 2:length(new_df[1,])-1){
sapply(new_df, sum)
# cat(class(new_df), class(sum))
# for (i in 2:length(new_df[1,])-1){
sapply(new_df[,2:8], sum)
lapply(new_df[,2:8], sum)
print(sapply(new_df[,2:8], sum))
print(sapply(new_df[,2:8], sum))
print(lapply(new_df[,2:8], sum))
trim.CV <- function(data.CV){
#1. calculate the IQR
iqr.CV <- IQR(data.CV)
#2. calculate quantiles
quan.CV <- quantile(data.CV, probs = seq(0, 1, 0.25))
quan1 <- quan.CV[[2]]
quan3 <- quan.CV[[4]]
#3. remove outliers
# first make a mask
mask <- ifelse((data.CV - quan3 > 1.5 * iqr.CV) | (quan1 - data.CV > 1.5 * iqr.CV), FALSE, TRUE)
# apply the mask
trim.data.CV <- data.CV[mask]
# calculate cov from masked data and return the value
return (sd(trim.data.CV)/mean(trim.data.CV))
}
# load datafile
irisdf <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data")
df_names <- readLines("https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.names")
colnames(irisdf) <- c("sepal_length_cm", "sepal_width_cm", "petal_length_cm", "petal_width_cm", "class")
irisdf$class <- as.factor(irisdf$class)
# try our our function on the data
sepwid.cov <- trim.CV(irisdf$sepal_width_cm)
print(paste("The sepal width coefficient of variance is : ", sepwid.cov))
# group by class, apply sd on petal_width
std.iris <- tapply(irisdf$petal_width, irisdf$class, sd)
print(std.iris)
# cbind the columns so we can do them all at once
seplen.med <- aggregate(cbind(irisdf$sepal_length_cm, irisdf$sepal_width_cm, irisdf$petal_length_cm, irisdf$petal_width_cm), list(irisdf$class), median)
colnames(seplen.med) <- c("group", "sep len med", "sep wid med", "pet len med", "pet wid med")
print(seplen.med)
col.sums <- apply(irisdf[,c(1:4)], 2,sum)
cat("column sums of all numerical data in irisdf:\n\n")
print(col.sums)
iris.ratio <- c()
for (i in 1:length(irisdf$sepal_length_cm))
{
row.ratio <-(irisdf$sepal_length_cm[i] + irisdf$petal_length_cm[i]) /
(irisdf$sepal_width_cm[i] + irisdf$petal_width_cm[i])
iris.ratio[i] <- row.ratio
}
cat("Fraction of observations > 2.5 = ", length(iris.ratio[iris.ratio > 2.5]) / length(iris.ratio))
get_ratio <- function(rowVec){
return()
}
iris.ratio2 <- apply(irisdf[,1:4], 1, get_ratio)
cat("Fraction of observations > 2.5 = ", length(iris.ratio2[iris.ratio > 2.5]) / length(irisdf[,1]))
# load datafile
# rasslefrass, its importing awful with sep=" "...
ecoli.raw <- readLines("https://archive.ics.uci.edu/ml/machine-learning-databases/ecoli/ecoli.data", header=FALSE)
# load datafile
# rasslefrass, its importing awful with sep=" "...
ecoli.raw <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/ecoli/ecoli.data", header=FALSE)
# load datafile
# rasslefrass, its importing awful with sep=" "...
ecoli.raw <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/ecoli/ecoli.data", header=FALSE)
ecoli.names.raw <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/ecoli/ecoli.names", header=FALSE)
trim.CV <- function(data.CV){
#1. calculate the IQR
iqr.CV <- IQR(data.CV)
#2. calculate quantiles
quan.CV <- quantile(data.CV, probs = seq(0, 1, 0.25))
quan1 <- quan.CV[[2]]
quan3 <- quan.CV[[4]]
#3. remove outliers
# first make a mask
mask <- ifelse((data.CV - quan3 > 1.5 * iqr.CV) | (quan1 - data.CV > 1.5 * iqr.CV), FALSE, TRUE)
# apply the mask
trim.data.CV <- data.CV[mask]
# calculate cov from masked data and return the value
return (sd(trim.data.CV)/mean(trim.data.CV))
}
# load datafile
irisdf <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data")
df_names <- readLines("https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.names")
colnames(irisdf) <- c("sepal_length_cm", "sepal_width_cm", "petal_length_cm", "petal_width_cm", "class")
irisdf$class <- as.factor(irisdf$class)
# try our our function on the data
sepwid.cov <- trim.CV(irisdf$sepal_width_cm)
print(paste("The sepal width coefficient of variance is : ", sepwid.cov))
# group by class, apply sd on petal_width
std.iris <- tapply(irisdf$petal_width, irisdf$class, sd)
print(std.iris)
# cbind the columns so we can do them all at once
seplen.med <- aggregate(cbind(irisdf$sepal_length_cm, irisdf$sepal_width_cm, irisdf$petal_length_cm, irisdf$petal_width_cm), list(irisdf$class), median)
colnames(seplen.med) <- c("group", "sep len med", "sep wid med", "pet len med", "pet wid med")
print(seplen.med)
col.sums <- apply(irisdf[,c(1:4)], 2,sum)
cat("column sums of all numerical data in irisdf:\n\n")
print(col.sums)
iris.ratio <- c()
for (i in 1:length(irisdf$sepal_length_cm))
{
row.ratio <-(irisdf$sepal_length_cm[i] + irisdf$petal_length_cm[i]) /
(irisdf$sepal_width_cm[i] + irisdf$petal_width_cm[i])
iris.ratio[i] <- row.ratio
}
cat("Fraction of observations > 2.5 = ", length(iris.ratio[iris.ratio > 2.5]) / length(iris.ratio))
get_ratio <- function(rowVec){
return()
}
iris.ratio2 <- apply(irisdf[,1:4], 1, get_ratio)
cat("Fraction of observations > 2.5 = ", length(iris.ratio2[iris.ratio > 2.5]) / length(irisdf[,1]))
# load datafile
# rasslefrass, its importing awful with sep=" "...
ecoli.raw <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/ecoli/ecoli.data", header=FALSE)
ecoli.names.raw <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/ecoli/ecoli.names", header=FALSE)
# gsub('[\t]', '', ecoli.names.raw)
for (i in ecoli.names.raw[36:49, 1]){
print(i)
}
import.names <- c("seq_name", "mcg", "gvh", "lip", "chg", "aac", "alm1", "alm2", "miss.att.val")
awful.parse.func <- function(df){
new_df <- data.frame(seq_name = NA,
mcg = NA,
gvh = NA,
lip = NA,
chg = NA,
aac = NA,
alm1 = NA,
alm2 = NA,
miss.att.val = NA)
for (i in 1:length(df[,1])){
strRow <- as.character(ecoli.raw[i,])
strRow2 <- gsub("[,]+", ",", gsub(" ", ",",strRow))
strCols <- unlist(strsplit(strRow2, ","))
new_df[i,] <- strCols
}
return (new_df)
}
awful.df <- awful.parse.func(ecoli.raw)
for (i in 2:(length(awful.df[1,]) - 1))
{
if (i == 1 | i == length(awful.df[1,]))
{
awful.df[,i] <- as.factor(awful.df[,i])
}
else
{
awful.df[,i] <- as.numeric(awful.df[,i])
}
}
print(head(awful.df))
new_df <- awful.df
# that was a chore
print(lapply(new_df, data.class))
print(sapply(new_df[,2:8], sum))
print(lapply(new_df[,2:8], sum))
library('rmarkdown')
library('bookdown')
print("hello")
print("world")
